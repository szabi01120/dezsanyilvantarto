from flask import Blueprint, request, jsonify
from datetime import datetime
import uuid
from src.extensions.database import db
from src.models.delivery_note import DeliveryNote, DeliveryNoteItem
from src.models.inventory import Inventory, InventoryMovement

delivery_notes_bp = Blueprint('delivery_notes', __name__)

def generate_delivery_number():
    """UUID-alap√∫ delivery number"""
    today = datetime.now()
    date_str = today.strftime('%Y%m%d')
    
    # R√∂vid UUID gener√°l√°s
    short_uuid = str(uuid.uuid4()).replace('-', '')[:4].upper()
    
    delivery_number = f"SZ-{date_str}-{short_uuid}"
    return delivery_number

def update_inventory_average_price(inventory_item, new_quantity, new_unit_price, currency):
    """S√∫lyozott √°tlag√°r sz√°m√≠t√°sa"""
    if inventory_item.current_quantity == 0:
        # Ha nincs k√©szleten, az √∫j √°r lesz az √°tlag
        inventory_item.average_purchase_price = new_unit_price
        inventory_item.currency = currency
    else:
        # Ha m√°s p√©nznemben van, egyel≈ëre nem keverj√ºk
        if inventory_item.currency == currency:
            # S√∫lyozott √°tlag sz√°m√≠t√°s
            total_current_value = inventory_item.current_quantity * inventory_item.average_purchase_price
            total_new_value = new_quantity * new_unit_price
            total_quantity = inventory_item.current_quantity + new_quantity
            
            inventory_item.average_purchase_price = (total_current_value + total_new_value) / total_quantity
        # Ha m√°s a p√©nznem, megtartjuk a r√©git (k√©s≈ëbbi fejleszt√©s: √°tv√°lt√°s)

@delivery_notes_bp.route('/get_delivery_notes', methods=['GET'])
def get_all_delivery_notes():
    try:
        delivery_notes = DeliveryNote.query.order_by(DeliveryNote.delivery_date.desc()).all()
        return jsonify([dn.to_dict() for dn in delivery_notes]), 200
    except Exception as e:
        return jsonify({
            'message': 'Hiba a sz√°ll√≠t√≥levelek lek√©rdez√©sekor.',
            'error': str(e)
        }), 400

@delivery_notes_bp.route('/create_delivery_note', methods=['POST'])
def create_delivery_note():
    try:
        delivery_number = generate_delivery_number()
        
        new_delivery_note = DeliveryNote(
            delivery_number=delivery_number,
            delivery_date=datetime.now().date()
        )
        
        db.session.add(new_delivery_note)
        db.session.commit()
        result_dict = new_delivery_note.to_dict()
        
        return jsonify({
            'message': 'Sz√°ll√≠t√≥lev√©l sikeresen l√©trehozva.',
            'delivery_note': result_dict
        }), 201
        
    except Exception as e:        
        db.session.rollback()
        return jsonify({
            'message': 'Hiba a sz√°ll√≠t√≥lev√©l l√©trehoz√°sakor.',
            'error': str(e),
            'error_type': str(type(e))
        }), 400

@delivery_notes_bp.route('/<int:delivery_note_id>', methods=['GET'])
def get_delivery_note(delivery_note_id):
    try:
        delivery_note = DeliveryNote.query.get_or_404(delivery_note_id)
        return jsonify(delivery_note.to_dict()), 200
    except Exception as e:
        return jsonify({
            'message': 'Hiba a sz√°ll√≠t√≥lev√©l lek√©rdez√©sekor.',
            'error': str(e)
        }), 400

@delivery_notes_bp.route('/<int:delivery_note_id>/add_item', methods=['POST'])
def add_item_to_delivery_note(delivery_note_id):
    """T√©tel hozz√°ad√°sa sz√°ll√≠t√≥lev√©lhez - INTELLIGENS MERGE LOGIK√ÅVAL"""
    delivery_note = DeliveryNote.query.get_or_404(delivery_note_id)
    data = request.get_json()
    
    try:
        total_price = data['quantity'] * data['unit_price']
        
        # DELIVERY NOTE ITEM L√âTREHOZ√ÅSA
        new_item = DeliveryNoteItem(
            delivery_note_id=delivery_note_id,
            product_name=data['product_name'],
            product_type=data['product_type'],
            manufacturer=data['manufacturer'],
            unit_of_measure=data.get('unit_of_measure', 'db'),
            quantity=data['quantity'],
            unit_price=data['unit_price'],
            total_price=total_price,
            currency=data.get('currency', 'HUF')
        )
        
        db.session.add(new_item)
        
        # ‚úÖ INTELLIGENS INVENTORY KEZEL√âS
        item_data = {
            'product_name': data['product_name'],
            'product_type': data['product_type'],
            'manufacturer': data['manufacturer'],
            'unit_of_measure': data.get('unit_of_measure', 'db'),
            'quantity': data['quantity'],
            'unit_price': data['unit_price'],
            'currency': data.get('currency', 'HUF')
        }
        
        inventory_item = smart_add_item_logic(item_data, delivery_note_id)
        
        # INVENTORY MOVEMENT R√ñGZ√çT√âSE
        movement = InventoryMovement(
            inventory_id=inventory_item.id,
            movement_type='IN',
            quantity=data['quantity'],
            unit_price=data['unit_price'],
            currency=data.get('currency', 'HUF'),
            reference_type='DELIVERY_NOTE',
            reference_id=delivery_note_id,
            notes=f"Sz√°ll√≠t√≥lev√©l: {delivery_note.delivery_number}"
        )
        db.session.add(movement)
        
        # SZ√ÅLL√çT√ìLEV√âL √ñSSZ√âRT√âK FRISS√çT√âSE
        delivery_note.total_value += total_price
        delivery_note.currency = data.get('currency', 'HUF')
        
        db.session.commit()
        
        return jsonify({
            'message': 'T√©tel sikeresen hozz√°adva.',
            'item': new_item.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå ERROR in add_item_to_delivery_note: {str(e)}")
        return jsonify({
            'message': 'Hiba a t√©tel hozz√°ad√°sakor.',
            'error': str(e)
        }), 400

@delivery_notes_bp.route('/<int:delivery_note_id>/items/<int:item_id>', methods=['PUT'])
def update_delivery_note_item(delivery_note_id, item_id):
    """Sz√°ll√≠t√≥lev√©l t√©tel m√≥dos√≠t√°sa - INTELLIGENS INVENTORY SYNC"""
    delivery_note = DeliveryNote.query.get_or_404(delivery_note_id)
    item = DeliveryNoteItem.query.filter_by(
        id=item_id, 
        delivery_note_id=delivery_note_id
    ).first_or_404()
    
    data = request.get_json()

    try:
        if not data:
            return jsonify({
                'message': 'Nincs megadva adat a t√©tel m√≥dos√≠t√°s√°hoz.'
            }), 400
        
        # R√âGI ADATOK MENT√âSE
        old_item_data = {
            'product_name': item.product_name,
            'product_type': item.product_type,
            'manufacturer': item.manufacturer,
            'unit_of_measure': item.unit_of_measure,
            'quantity': item.quantity,
            'unit_price': item.unit_price,
            'currency': item.currency,
            'total_price': item.total_price
        }
        
        # √öJ ADATOK
        new_item_data = {
            'product_name': data.get('product_name', item.product_name),
            'product_type': data.get('product_type', item.product_type),
            'manufacturer': data.get('manufacturer', item.manufacturer),
            'unit_of_measure': data.get('unit_of_measure', item.unit_of_measure),
            'quantity': data.get('quantity', item.quantity),
            'unit_price': data.get('unit_price', item.unit_price),
            'currency': data.get('currency', item.currency)
        }
        new_item_data['total_price'] = new_item_data['quantity'] * new_item_data['unit_price']
        
        print(f"üîÑ UPDATING DELIVERY NOTE ITEM {item_id}")
        print(f"Old: {old_item_data}")
        print(f"New: {new_item_data}")
        
        # ‚úÖ INTELLIGENS INVENTORY FRISS√çT√âS
        quantity_change = new_item_data['quantity'] - old_item_data['quantity']
        smart_inventory_update(old_item_data, new_item_data, quantity_change, delivery_note_id)
        
        # DELIVERY NOTE ITEM FRISS√çT√âSE
        item.product_name = new_item_data['product_name']
        item.product_type = new_item_data['product_type']
        item.manufacturer = new_item_data['manufacturer']
        item.unit_of_measure = new_item_data['unit_of_measure']
        item.quantity = new_item_data['quantity']
        item.unit_price = new_item_data['unit_price']
        item.total_price = new_item_data['total_price']
        item.currency = new_item_data['currency']
        
        # SZ√ÅLL√çT√ìLEV√âL √ñSSZ√âRT√âK KORREKCI√ì
        delivery_note.total_value = delivery_note.total_value - old_item_data['total_price'] + new_item_data['total_price']
        
        db.session.commit()
        
        return jsonify({
            'message': 'T√©tel sikeresen m√≥dos√≠tva.',
            'item': item.to_dict()
        }), 200
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå ERROR in update_delivery_note_item: {str(e)}")
        return jsonify({
            'message': 'Hiba a t√©tel m√≥dos√≠t√°sakor.',
            'error': str(e)
        }), 400

@delivery_notes_bp.route('/<int:delivery_note_id>/items/<int:item_id>', methods=['DELETE'])
def delete_delivery_note_item(delivery_note_id, item_id):
    """Sz√°ll√≠t√≥lev√©l t√©tel t√∂rl√©se"""
    delivery_note = DeliveryNote.query.get_or_404(delivery_note_id)
    item = DeliveryNoteItem.query.filter_by(
        id=item_id, 
        delivery_note_id=delivery_note_id
    ).first_or_404()
    
    try:
        # K√©szlet korrekci√≥
        inventory_item = Inventory.query.filter_by(
            product_name=item.product_name,
            product_type=item.product_type,
            manufacturer=item.manufacturer
        ).first()
        
        if inventory_item:
            inventory_item.current_quantity -= item.quantity
            inventory_item.available_quantity -= item.quantity
            inventory_item.last_updated = datetime.utcnow()
            inventory_item.calculate_total_value()
            
            # Ha 0 alatt menne, 0-ra √°ll√≠tjuk
            if inventory_item.current_quantity < 0:
                inventory_item.current_quantity = 0
            if inventory_item.available_quantity < 0:
                inventory_item.available_quantity = 0
        
        # Sz√°ll√≠t√≥lev√©l √∂ssz√©rt√©k korrekci√≥
        delivery_note.total_value -= item.total_price
        
        # Mozg√°s r√∂gz√≠t√©se
        if inventory_item:
            movement = InventoryMovement(
                inventory_id=inventory_item.id,
                movement_type='OUT',
                quantity=item.quantity,
                unit_price=item.unit_price,
                currency=item.currency,
                reference_type='DELIVERY_NOTE_DELETE',
                reference_id=delivery_note_id,
                notes=f"Sz√°ll√≠t√≥lev√©l t√©tel t√∂rl√©s: {delivery_note.delivery_number}"
            )
            db.session.add(movement)
        
        # T√©tel t√∂rl√©se
        db.session.delete(item)
        db.session.commit()
        
        return jsonify({
            'message': 'T√©tel sikeresen t√∂r√∂lve.'
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({
            'message': 'Hiba a t√©tel t√∂rl√©sekor.',
            'error': str(e)
        }), 400

@delivery_notes_bp.route('/<int:delivery_note_id>', methods=['PUT'])
def update_delivery_note(delivery_note_id):
    delivery_note = DeliveryNote.query.get_or_404(delivery_note_id)
    data = request.get_json()
    
    try:
        delivery_note.supplier_name = data.get('supplier_name', delivery_note.supplier_name)
        delivery_note.notes = data.get('notes', delivery_note.notes)
        
        db.session.commit()
        return jsonify(delivery_note.to_dict()), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({
            'message': 'Hiba a sz√°ll√≠t√≥lev√©l friss√≠t√©sekor.',
            'error': str(e)
        }), 400

@delivery_notes_bp.route('/<int:delivery_note_id>', methods=['DELETE'])
def delete_delivery_note(delivery_note_id):
    """Sz√°ll√≠t√≥lev√©l t√∂rl√©se (minden t√©tel√©vel egy√ºtt)"""
    delivery_note = DeliveryNote.query.get_or_404(delivery_note_id)
    
    try:
        # T√©telek ment√©se (miel≈ëtt t√∂rl≈ëdn√©nek)
        items_to_process = []
        for item in delivery_note.items:
            items_to_process.append({
                'product_name': item.product_name,
                'product_type': item.product_type,
                'manufacturer': item.manufacturer,
                'quantity': item.quantity,
                'unit_price': item.unit_price,
                'currency': item.currency
            })
        
        # K√©szlet korrekci√≥k
        for item_data in items_to_process:
            inventory_item = Inventory.query.filter_by(
                product_name=item_data['product_name'],
                product_type=item_data['product_type'],
                manufacturer=item_data['manufacturer']
            ).first()
            
            if inventory_item:
                inventory_item.current_quantity -= item_data['quantity']
                inventory_item.available_quantity -= item_data['quantity']
                inventory_item.last_updated = datetime.utcnow()
                inventory_item.calculate_total_value()
                
                # Ha 0 alatt menne, 0-ra √°ll√≠tjuk
                if inventory_item.current_quantity < 0:
                    inventory_item.current_quantity = 0
                if inventory_item.available_quantity < 0:
                    inventory_item.available_quantity = 0
                
                # Mozg√°s r√∂gz√≠t√©se
                movement = InventoryMovement(
                    inventory_id=inventory_item.id,
                    movement_type='OUT',
                    quantity=item_data['quantity'],
                    unit_price=item_data['unit_price'],
                    currency=item_data['currency'],
                    reference_type='DELIVERY_NOTE_DELETE',
                    reference_id=delivery_note_id,
                    notes=f"Sz√°ll√≠t√≥lev√©l t√∂rl√©s: {delivery_note.delivery_number}"
                )
                db.session.add(movement)
        
        # Sz√°ll√≠t√≥lev√©l t√∂rl√©se
        db.session.delete(delivery_note)
        db.session.commit()
        
        return jsonify({
            'message': 'Sz√°ll√≠t√≥lev√©l sikeresen t√∂r√∂lve.'
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({
            'message': 'Hiba a sz√°ll√≠t√≥lev√©l t√∂rl√©sekor.',
            'error': str(e)
        }), 400
    
# ‚úÖ √öJ: INTELLIGENS INVENTORY MANAGEMENT SZOLG√ÅLTAT√ÅSOK

def get_product_identity_key(product_name, product_type, manufacturer, unit_of_measure, currency):
    """Term√©k azonos√≠t√≥ kulcs gener√°l√°sa"""
    return f"{product_name}|{product_type}|{manufacturer}|{unit_of_measure}|{currency}"

def find_matching_inventory_item(product_name, product_type, manufacturer, unit_of_measure, currency):
    """Azonos term√©k keres√©se inventory-ban"""
    return Inventory.query.filter_by(
        product_name=product_name,
        product_type=product_type,
        manufacturer=manufacturer,
        unit_of_measure=unit_of_measure,
        currency=currency
    ).first()

def smart_inventory_update(old_item_data, new_item_data, quantity_change, delivery_note_id):
    """Intelligens inventory friss√≠t√©s merge/split logik√°val"""
    
    # R√©gi term√©k azonos√≠t√≥
    old_key = get_product_identity_key(
        old_item_data['product_name'],
        old_item_data['product_type'], 
        old_item_data['manufacturer'],
        old_item_data['unit_of_measure'],
        old_item_data['currency']
    )
    
    # √öj term√©k azonos√≠t√≥
    new_key = get_product_identity_key(
        new_item_data['product_name'],
        new_item_data['product_type'],
        new_item_data['manufacturer'], 
        new_item_data['unit_of_measure'],
        new_item_data['currency']
    )
    
    print(f"üîç SMART UPDATE DEBUG:")
    print(f"Old key: {old_key}")
    print(f"New key: {new_key}")
    print(f"Keys match: {old_key == new_key}")
    print(f"Quantity change: {quantity_change}")
    
    if old_key == new_key:
        # ‚úÖ UGYANAZ A TERM√âK ‚Üí CSAK MENNYIS√âG FRISS√çT√âS
        print("üîÑ SAME PRODUCT - Updating quantity only")
        
        inventory_item = find_matching_inventory_item(
            new_item_data['product_name'],
            new_item_data['product_type'],
            new_item_data['manufacturer'],
            new_item_data['unit_of_measure'],
            new_item_data['currency']
        )
        
        if inventory_item:
            # Mennyis√©g korrekci√≥
            inventory_item.current_quantity += quantity_change
            inventory_item.available_quantity += quantity_change
            inventory_item.last_updated = datetime.utcnow()
            
            # √Åtlag√°r √∫jrasz√°m√≠t√°s ha √°r v√°ltozott
            if new_item_data['unit_price'] != old_item_data['unit_price']:
                print("üí∞ Price changed, recalculating average...")
                # TODO: Komplex √°tlag√°r sz√°m√≠t√°s implement√°l√°sa
            
            inventory_item.calculate_total_value()
            
            # Movement r√∂gz√≠t√©se
            if quantity_change != 0:
                movement = InventoryMovement(
                    inventory_id=inventory_item.id,
                    movement_type='ADJUSTMENT',
                    quantity=quantity_change,
                    unit_price=new_item_data['unit_price'],
                    currency=new_item_data['currency'],
                    reference_type='DELIVERY_NOTE_UPDATE',
                    reference_id=delivery_note_id,
                    notes=f"Sz√°ll√≠t√≥lev√©l t√©tel m√≥dos√≠t√°s - mennyis√©g v√°ltoz√°s: {quantity_change}"
                )
                db.session.add(movement)
        
    else:
        # ‚úÖ K√úL√ñNB√ñZ≈ê TERM√âK ‚Üí SPLIT LOGIC
        print("üîÄ DIFFERENT PRODUCT - Split logic")
        
        # 1. R√âGI TERM√âKB≈êL KIVONJUK
        old_inventory = find_matching_inventory_item(
            old_item_data['product_name'],
            old_item_data['product_type'],
            old_item_data['manufacturer'],
            old_item_data['unit_of_measure'],
            old_item_data['currency']
        )
        
        if old_inventory:
            old_inventory.current_quantity -= old_item_data['quantity']
            old_inventory.available_quantity -= old_item_data['quantity']
            old_inventory.last_updated = datetime.utcnow()
            old_inventory.calculate_total_value()
            
            # OUT movement a r√©gi term√©khez
            movement_out = InventoryMovement(
                inventory_id=old_inventory.id,
                movement_type='OUT',
                quantity=old_item_data['quantity'],
                unit_price=old_item_data['unit_price'],
                currency=old_item_data['currency'],
                reference_type='DELIVERY_NOTE_UPDATE',
                reference_id=delivery_note_id,
                notes=f"T√©tel m√≥dos√≠t√°s - r√©gi term√©k elt√°vol√≠t√°sa"
            )
            db.session.add(movement_out)
        
        # 2. √öJ TERM√âKHEZ HOZZ√ÅADJUK VAGY L√âTREHOZZUK
        new_inventory = find_matching_inventory_item(
            new_item_data['product_name'],
            new_item_data['product_type'],
            new_item_data['manufacturer'],
            new_item_data['unit_of_measure'],
            new_item_data['currency']
        )
        
        if new_inventory:
            # Megl√©v≈ë term√©khez hozz√°ad√°s
            print("üì¶ Adding to existing inventory item")
            update_inventory_average_price(
                new_inventory,
                new_item_data['quantity'],
                new_item_data['unit_price'],
                new_item_data['currency']
            )
            new_inventory.current_quantity += new_item_data['quantity']
            new_inventory.available_quantity += new_item_data['quantity']
            new_inventory.last_updated = datetime.utcnow()
            new_inventory.calculate_total_value()
            
        else:
            # √öj inventory item l√©trehoz√°s
            print("üÜï Creating new inventory item")
            new_inventory = Inventory(
                product_name=new_item_data['product_name'],
                product_type=new_item_data['product_type'],
                manufacturer=new_item_data['manufacturer'],
                unit_of_measure=new_item_data['unit_of_measure'],
                current_quantity=new_item_data['quantity'],
                available_quantity=new_item_data['quantity'],
                average_purchase_price=new_item_data['unit_price'],
                currency=new_item_data['currency']
            )
            new_inventory.calculate_total_value()
            db.session.add(new_inventory)
            db.session.flush()  # ID gener√°l√°shoz
        
        # IN movement az √∫j term√©khez
        movement_in = InventoryMovement(
            inventory_id=new_inventory.id,
            movement_type='IN',
            quantity=new_item_data['quantity'],
            unit_price=new_item_data['unit_price'],
            currency=new_item_data['currency'],
            reference_type='DELIVERY_NOTE_UPDATE',
            reference_id=delivery_note_id,
            notes=f"T√©tel m√≥dos√≠t√°s - √∫j term√©k hozz√°ad√°sa"
        )
        db.session.add(movement_in)

def smart_add_item_logic(item_data, delivery_note_id):
    """Intelligens term√©k hozz√°ad√°s merge logik√°val"""
    
    # Keres√©s megl√©v≈ë inventory-ban
    existing_inventory = find_matching_inventory_item(
        item_data['product_name'],
        item_data['product_type'],
        item_data['manufacturer'],
        item_data['unit_of_measure'],
        item_data['currency']
    )
    
    if existing_inventory:
        print(f"üîó MERGE: Adding {item_data['quantity']} to existing inventory")
        # Merge - hozz√°ad√°s megl√©v≈ëh√∂z
        update_inventory_average_price(
            existing_inventory,
            item_data['quantity'],
            item_data['unit_price'],
            item_data['currency']
        )
        existing_inventory.current_quantity += item_data['quantity']
        existing_inventory.available_quantity += item_data['quantity']
        existing_inventory.last_updated = datetime.utcnow()
        existing_inventory.calculate_total_value()
        
        return existing_inventory
    else:
        print(f"üÜï NEW: Creating new inventory item")
        # √öj term√©k l√©trehoz√°s
        new_inventory = Inventory(
            product_name=item_data['product_name'],
            product_type=item_data['product_type'],
            manufacturer=item_data['manufacturer'],
            unit_of_measure=item_data['unit_of_measure'],
            current_quantity=item_data['quantity'],
            available_quantity=item_data['quantity'],
            average_purchase_price=item_data['unit_price'],
            currency=item_data['currency']
        )
        new_inventory.calculate_total_value()
        db.session.add(new_inventory)
        db.session.flush()
        
        return new_inventory

# ‚úÖ √öJ: AUTOCOMPLETE API
@delivery_notes_bp.route('/autocomplete/products', methods=['GET'])
def autocomplete_products():
    """Term√©k autocomplete API"""
    query = request.args.get('q', '').strip()
    
    if len(query) < 2:
        return jsonify([]), 200
    
    try:
        # Term√©knevek keres√©se
        products = db.session.query(
            Inventory.product_name,
            Inventory.product_type, 
            Inventory.manufacturer,
            Inventory.unit_of_measure,
            Inventory.currency,
            Inventory.average_purchase_price,
            Inventory.current_quantity
        ).filter(
            db.or_(
                Inventory.product_name.ilike(f'%{query}%'),
                Inventory.product_type.ilike(f'%{query}%'),
                Inventory.manufacturer.ilike(f'%{query}%')
            )
        ).distinct().limit(10).all()
        
        results = []
        for product in products:
            results.append({
                'product_name': product.product_name,
                'product_type': product.product_type,
                'manufacturer': product.manufacturer,
                'unit_of_measure': product.unit_of_measure,
                'currency': product.currency,
                'last_price': product.average_purchase_price,
                'current_stock': product.current_quantity,
                'display_text': f"{product.product_name} - {product.product_type} ({product.manufacturer})"
            })
        
        return jsonify(results), 200
        
    except Exception as e:
        return jsonify({
            'message': 'Hiba az autocomplete lek√©rdez√©sekor.',
            'error': str(e)
        }), 400
